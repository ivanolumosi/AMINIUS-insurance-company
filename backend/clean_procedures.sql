-- ============================================
-- CLEANED PostgreSQL Stored Procedures
-- Generated by Ultimate PostgreSQL Fixer
-- ============================================

-- Get Agent Summary (Dashboard Stats)
CREATE OR REPLACE FUNCTION get_agent_summary(agent_id_param UUID)
RETURNS TABLE(
    total_policies INTEGER,
    active_policies INTEGER,
    expiring_in_30_days INTEGER,
    expiring_in_60_days INTEGER,
    total_companies INTEGER,
    total_clients INTEGER,
    inactive_policies INTEGER
) AS $$
DECLARE
    total_pol INTEGER := 0;
    active_pol INTEGER := 0;
    expiring_30 INTEGER := 0;
    expiring_60 INTEGER := 0;
    total_comp INTEGER := 0;
    total_cli INTEGER := 0;
BEGIN
    -- Get policy counts
    SELECT COUNT(*)::INTEGER
    INTO total_pol
    FROM client_policies cp
    JOIN clients c ON cp.client_id = c.client_id
    WHERE c.agent_id = agent_id_param
      AND cp.is_active = TRUE;

    -- Get active policy count
    SELECT COUNT(*)::INTEGER
    INTO active_pol
    FROM client_policies cp
    JOIN clients c ON cp.client_id = c.client_id
    WHERE c.agent_id = agent_id_param
      AND cp.is_active = TRUE
      AND cp.status = 'Active';

    -- Get policies expiring in 30 days
    SELECT COUNT(*)::INTEGER
    INTO expiring_30
    FROM client_policies cp
    JOIN clients c ON cp.client_id = c.client_id
    WHERE c.agent_id = agent_id_param
      AND cp.is_active = TRUE
      AND cp.status = 'Active'
      AND cp.end_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days';

    -- Get policies expiring in 60 days
    SELECT COUNT(*)::INTEGER
    INTO expiring_60
    FROM client_policies cp
    JOIN clients c ON cp.client_id = c.client_id
    WHERE c.agent_id = agent_id_param
      AND cp.is_active = TRUE
      AND cp.status = 'Active'
      AND cp.end_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '60 days';

    -- Get company count
    SELECT COUNT(DISTINCT cp.company_id)::INTEGER
    INTO total_comp
    FROM client_policies cp
    JOIN clients c ON cp.client_id = c.client_id
    WHERE c.agent_id = agent_id_param
      AND cp.is_active = TRUE;

    -- Get client count
    SELECT COUNT(*)::INTEGER
    INTO total_cli
    FROM clients c
    WHERE c.agent_id = agent_id_param
      AND c.is_active = TRUE;

    -- Return result
    RETURN QUERY
    SELECT total_pol as total_policies,
        active_pol as active_policies,
        expiring_30 as expiring_in_30_days,
        expiring_60 as expiring_in_60_days,
        total_comp as total_companies,
        total_cli as total_clients,
        (total_pol - active_pol)::INTEGER as inactive_policies;
END;
$$ LANGUAGE plpgsql;

-- Update Policy Category
CREATE OR REPLACE FUNCTION update_policy_category(
    category_id_param UUID,
    category_name_param VARCHAR(50) DEFAULT NULL,
    description_param VARCHAR(200) DEFAULT NULL,
    is_active_param BOOLEAN DEFAULT NULL
)
RETURNS INTEGER AS $$
DECLARE
    rows_affected INTEGER;
BEGIN
    UPDATE policy_categories
    SET 
        category_name = COALESCE(category_name_param, category_name),
        description = COALESCE(description_param, description),
        is_active = COALESCE(is_active_param, is_active)
    WHERE category_id = category_id_param;
    
    GET DIAGNOSTICS rows_affected = ROW_COUNT;
    RETURN rows_affected;
END;
$$ LANGUAGE plpgsql;

-- Create Insurance Company
CREATE OR REPLACE FUNCTION sp_create_insurance_company(
    company_name_param VARCHAR(100),
    is_active_param BOOLEAN DEFAULT TRUE
)
RETURNS UUID AS $$
DECLARE
    new_company_id UUID;
BEGIN
    new_company_id := gen_random_uuid();
    
    INSERT INTO insurance_companies (company_id, company_name, is_active, created_date)
    VALUES (new_company_id, company_name_param, is_active_param, NOW());
    
    RETURN new_company_id;
END;
$$ LANGUAGE plpgsql;

-- Get All Insurance Companies
CREATE OR REPLACE FUNCTION sp_get_insurance_companies()
RETURNS TABLE(
    company_id UUID,
    company_name VARCHAR(100),
    is_active BOOLEAN,
    created_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT ic.company_id,
        ic.company_name,
        ic.is_active,
        ic.created_date
    FROM insurance_companies ic
    ORDER BY ic.company_name;
END;
$$ LANGUAGE plpgsql;
